name: CI/CD Pipeline

on:
  push:
    # branches: [main, staging, develop]
  pull_request:
    # branches: [main, staging]

env:
  UV_VERSION: "0.5.4"
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install Python dependencies
        run: uv sync --dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile || pnpm install

      - name: Run Python linting
        run: uv run ruff check .

      - name: Run Python formatting check
        run: uv run ruff format --check .

      - name: Run TypeScript type checking
        run: pnpm typecheck

      - name: Run security scanning
        run: uv run bandit -r functions/src/ -f json

      - name: Run Python unit tests
        run: |
          cd functions
          uv run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./functions/coverage.xml
          flags: unittests
          name: codecov-umbrella

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.apiUrl }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-SST-Staging
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install
          uv sync

      - name: Deploy to staging
        id: deploy
        run: |
          pnpm deploy -- --stage staging
          echo "apiUrl=$(cat .sst/outputs.json | jq -r '.apiUrl')" >> $GITHUB_OUTPUT

      - name: Run integration tests
        run: |
          export API_URL="${{ steps.deploy.outputs.apiUrl }}"
          python test_local.py

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.apiUrl }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          role-session-name: GitHubActions-SST-Production
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install
          uv sync

      - name: Deploy to production
        id: deploy
        run: |
          pnpm deploy -- --stage production
          echo "apiUrl=$(cat .sst/outputs.json | jq -r '.apiUrl')" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          export API_URL="${{ steps.deploy.outputs.apiUrl }}"
          curl -f "$API_URL/health" || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Successfully deployed to production: ${{ steps.deploy.outputs.apiUrl }}"
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
